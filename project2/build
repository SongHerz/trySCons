#!/usr/bin/env python

import sys
import pipes
import argparse
import subprocess
import multiprocessing

from buildhelper import buildtype


def get_build_types():
    """
    Return ([build type in str], default type in str)
    """
    print
    print "Retriving build types ..."
    output = subprocess.check_output(['scons', '-h'])
    for each in output.splitlines():
        t = buildtype.from_str(each)
        if t is not None:
            return t

    assert False, "Should not be here"
    pass


def parse_args():
    """
    Return ([build type], clean)
    clean   Bool    whether clean or not.
    """
    all_bts, default_bt = get_build_types()

    parser = argparse.ArgumentParser(description='Build this project')
    parser.add_argument('BUILD_TYPE', nargs='*', choices=all_bts + ['clean'],
                        default=default_bt,
                        help='Build given version(s) of the project (default: %(default)s)')

    args = parser.parse_args(sys.argv[1:])

    def update(acc, build_type):
        build_types, clean = acc

        if build_type == 'clean':
            return (build_types, True)
        else:
            build_types.append(build_type)
            return (build_types, clean)

    if isinstance(args.BUILD_TYPE, list):
        arg_build_types = args.BUILD_TYPE
    else:
        assert isinstance(args.BUILD_TYPE, str)
        arg_build_types = [args.BUILD_TYPE]

    build_types, clean = reduce(update, arg_build_types, ([], False))

    # build_types may be empty or contains duplicate strings
    if not build_types:
        build_types = [default_bt]
    else:
        build_types = list(set(build_types))

    return (build_types, clean)


def build(build_types, clean):
    """
    build_types [build type] coverage / release / debug
    clean       Bool    When True, clean the project with given targets
                             False, build the project with given targets
    """
    def run_cmd(args):
        """
        Show the command in shell, and run the cmd.
        """
        print
        print ' '.join(map(pipes.quote, args))
        subprocess.check_call(args)
        pass

    def jobs_arg():
        cpu_count = multiprocessing.cpu_count()
        if cpu_count > 1:
            return ['--jobs={}'.format(cpu_count)]
        else:
            return []

    assert isinstance(build_types, list) and build_types
    common_cmd_args = ['scons', '-Q']
    common_cmd_args.extend(jobs_arg())
    common_cmd_args.extend(['build={}'.format(','.join(build_types))])

    if not clean:
        run_cmd(common_cmd_args + ['stage=compile'])
        run_cmd(common_cmd_args + ['stage=link'])
    else:
        run_cmd(common_cmd_args + ['stage=link', '--clean'])
    pass


def main():
    build_types, clean = parse_args()
    build(build_types, clean)

if __name__ == '__main__':
    main()
