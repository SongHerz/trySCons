#!/usr/bin/env python

# For convenience, it is best to use VariantDir with SConscript file
#
# https://bitbucket.org/scons/scons/wiki/VariantDir%28%29
# Note that when you're not using an SConscript file in the src subdirectory, you must actually specify that the program must be built from the build/hello.c file that SCons will duplicate in the build subdirectory.

import os
import StringIO
import buildhelper as bh

EnsurePythonVersion(2, 7)


class Build(object):
    """
    Build apps.
    """
    def __init__(self, common_env, src_dir, variant_dir):
        """
        common_env      A common Environment instance.
                        This instance is cloned before modification and using in this class.
        src_dir         source directory
        variant_dir     build directory
        """
        self.__env = common_env.Clone()
        self.__src_dir = src_dir
        self.__variant_dir = variant_dir
        self.__lib_dirs, self.__app_main_srcs = bh.dirs_c_cpp_sources(src_dir)

        self.__env.VariantDir(self.__variant_dir, self.__src_dir, duplicate=0)
        pass

    def __to_build_path(self, src_path):
        if isinstance(src_path, str):
            return bh.replace_top_dir(src_path, self.__variant_dir)
        else:
            assert isinstance(src_path, list)
            return map(lambda x: bh.replace_top_dir(x, self.__variant_dir), src_path)

    def __build_static_libs(self):
        """
        Return a list of static libraries targets.
        """
        static_libs = []

        for each in self.__lib_dirs:
            lib_name = os.path.join(each, os.path.basename(each))
            static_libs.append(self.__env.StaticLibrary(
                self.__to_build_path(lib_name),
                self.__to_build_path(bh.c_cpp_sources(each))))

        return static_libs

    def __build_apps(self, static_lib_targets):
        """
        Construct app targets.
        static_lib_targets  [static library targets]
        """
        for app_src in self.__app_main_srcs:
            app_name, _ = os.path.splitext(app_src)
            app_obj = self.__env.Object(self.__to_build_path(app_src))
            self.__env.Program(self.__to_build_path(app_name), app_obj, LIBS=static_lib_targets)
        pass

    def build(self):
        """
        Construct all targets.
        """
        static_lib_targets = self.__build_static_libs()
        self.__build_apps(static_lib_targets)
        pass

    def __str__(self):
        """
        Retrn a string which is the statics of this class.
        """
        sio = StringIO.StringIO()
        print >> sio, "LIB_DIRS:", self.__lib_dirs
        print >> sio, "APP_MAIN_SRCS:", self.__app_main_srcs
        print >> sio, "VARIANT_DIR:", self.__variant_dir
        return sio.getvalue()


SOURCE_DIR = 'src'
VARIANT_DIR = 'obj'

env = Environment(
        CPPPATH=[SOURCE_DIR],
        CXXFLAGS=['-std=c++11'])

build = Build(env, SOURCE_DIR, VARIANT_DIR)
print build
build.build()
