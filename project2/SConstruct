#!/usr/bin/env python

# For convenience, it is best to use VariantDir with SConscript file
#
# https://bitbucket.org/scons/scons/wiki/VariantDir%28%29
# Note that when you're not using an SConscript file in the src subdirectory, you must actually specify that the program must be built from the build/hello.c file that SCons will duplicate in the build subdirectory.

EnsurePythonVersion(2, 7)


import os
import buildhelper as bh

SOURCE_DIR = 'src'
VARIANT_DIR = 'obj'

LIB_DIRS, APP_MAIN_SRCS = bh.dirs_c_cpp_sources(SOURCE_DIR)
print "LIB_DIRS:", LIB_DIRS
print "APP_MAIN_SRCS:", APP_MAIN_SRCS


def to_build_path(src_path):
    if isinstance(src_path, str):
        return bh.replace_top_dir(src_path, VARIANT_DIR)
    else:
        assert isinstance(src_path, list)
        return map(lambda x: bh.replace_top_dir(x, VARIANT_DIR), src_path)

env = Environment(
        CPPPATH=[SOURCE_DIR],
        CXXFLAGS=['-std=c++11'])
env.VariantDir(VARIANT_DIR, SOURCE_DIR, duplicate=0)


def build_static_libs(env, lib_dirs):
    """
    Return a list of static libraries targets.
    env         Environment instance
    lib_dirs    [lib path]
    """
    static_libs = []

    for each in lib_dirs:
        lib_name = os.path.join(each, os.path.basename(each))
        static_libs.append(env.StaticLibrary(
            to_build_path(lib_name),
            to_build_path(bh.c_cpp_sources(each))))

    return static_libs


def build_apps(env, app_main_srcs, static_lib_targets):
    """
    Construct app targets.
    env                 Environment instance
    app_main_srcs       [app main source path]
    static_lib_targets  [static library targets]
    """
    for app_src in app_main_srcs:
        app_name, _ = os.path.splitext(app_src)
        app_obj = env.Object(to_build_path(app_src))
        env.Program(to_build_path(app_name), app_obj, LIBS=static_lib_targets)
    pass


static_lib_targets = build_static_libs(env, LIB_DIRS)
build_apps(env, APP_MAIN_SRCS, static_lib_targets)
